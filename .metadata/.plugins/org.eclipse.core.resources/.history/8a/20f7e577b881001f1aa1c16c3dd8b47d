package Main;

import java.awt.Rectangle;

import Entity.Entity;

public class CollisionCheck {
	
	GamePanel g;
	
	public CollisionCheck(GamePanel g) {
		
		this.g = g ; 
		
	}
	
	public void ObjectCheckCollision(Entity entity) {
		
		int defaultEntityX = entity.worldX;
		int defaultEntityY = entity.worldY;
		
		if(entity.worldX > g.player.worldX - g.player.RelativeX - g.TileSize && entity.worldX < g.player.worldX + g.player.RelativeX + g.TileSize 
				&& entity.worldY > g.player.worldY - g.player.RelativeY - g.TileSize && entity.worldY < g.player.worldY + g.player.RelativeY + g.TileSize ) {
			
			for ( int i = 3 ; i < 4 ; i++) {
				entity.hitBox.x = entity.worldX + entity.hitBox.x;
				entity.hitBox.y = entity.worldY + entity.hitBox.y;
				switch (entity.Direction) {
				
				case "up" :
					 entity.hitBox.y -= entity.Speed;
					
					if(g.obj[i] != null) {
						
						
						g.obj[i].hitBox.x += g.obj[i].worldX ; 
						g.obj[i].hitBox.y += g.obj[i].worldY;
						
						System.out.println("Entity contains Object? " + entity.hitBox.contains(g.obj[i].hitBox.getX(), g.obj[i].hitBox.getY()));
						System.out.println("Object " + g.obj[i].name + " contains Entity? " + g.obj[i].hitBox.contains(entity.hitBox.getX(), entity.hitBox.getY()));
						System.out.println(g.obj[i].hitBox.x);
						System.out.println(entity.hitBox.x);
						
						if(entity.hitBox.intersects(g.obj[i].hitBox)  ) {
							System.out.println("Intersection !");
							if(g.obj[i].collision == true ) {
								System.out.println("collision !");
								entity.collisionOn = true ;
							}
						}
					}
					
						break;
						
					case "down" :  
						break;
						
					case "left" :  
						break;
					case "right" : 
						break;
						
					}
			
				
				
					
			}
		
			entity.hitBox.x = defaultEntityX ;
			entity.hitBox.y = defaultEntityY ;

	}
	}
	
	public void TileCheck(Entity entity ) {
		
		int hitBoxLeftX = entity.worldX + entity.hitBox.x ;
		int hitBoxRightX = entity.worldX + entity.hitBox.x + entity.hitBox.width ;
		int hitBoxTopY = entity.worldY + entity.hitBox.y;
		int hitBoxBottomY = entity.worldY + entity.hitBox.y + entity.hitBox.height ;
		
		int hitBoxLeftCol = hitBoxLeftX / g.TileSize;
		int hitBoxRightCol = hitBoxRightX / g.TileSize;
		int hitBoxTopRow = hitBoxTopY / g.TileSize;
		int hitBoxBottomRow = hitBoxBottomY / g.TileSize;
		
		int Tile1,Tile2;
		
switch (entity.Direction) {
		
		case "up" : hitBoxTopRow = (hitBoxTopY - entity.Speed) / g.TileSize ;
					Tile1 = g.TileM.TileMapNum[hitBoxLeftCol][hitBoxTopRow];
					Tile2 = g.TileM.TileMapNum[hitBoxRightCol][hitBoxTopRow];
					if(g.TileM.tile[Tile1].collision == true || g.TileM.tile[Tile2].collision == true) {
						entity.collisionOn = true ;
					}
			break;
			
		case "down" :  hitBoxBottomRow = (hitBoxBottomY + entity.Speed) / g.TileSize ;
						Tile1 = g.TileM.TileMapNum[hitBoxLeftCol][hitBoxBottomRow];
						Tile2 = g.TileM.TileMapNum[hitBoxRightCol][hitBoxBottomRow];
						if(g.TileM.tile[Tile1].collision == true || g.TileM.tile[Tile2].collision == true) {
							entity.collisionOn = true ;
		}
			break;
			
		case "left" :  hitBoxLeftCol = (hitBoxLeftX - entity.Speed) / g.TileSize ;
						Tile1 = g.TileM.TileMapNum[hitBoxLeftCol][hitBoxTopRow];
						Tile2 = g.TileM.TileMapNum[hitBoxLeftCol][hitBoxBottomRow];
						if(g.TileM.tile[Tile1].collision == true || g.TileM.tile[Tile2].collision == true) {
							entity.collisionOn = true ;
		}
			break;
		case "right" :  hitBoxRightCol = (hitBoxRightX + entity.Speed) / g.TileSize ;
						Tile1 = g.TileM.TileMapNum[hitBoxRightCol][hitBoxTopRow];
						Tile2 = g.TileM.TileMapNum[hitBoxRightCol][hitBoxBottomRow];
						if(g.TileM.tile[Tile1].collision == true || g.TileM.tile[Tile2].collision == true) {
							entity.collisionOn = true ;
		}
			break;
			
		
		}
	}
	
}
